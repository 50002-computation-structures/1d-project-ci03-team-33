/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_tester #(
        parameter CLK_FREQ = 10'h3e8
    ) (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam E_States_MANUAL_STEADY = 3'h0;
    localparam E_States_MANUAL_STORE16AFIRST = 3'h1;
    localparam E_States_MANUAL_STORE16ALAST = 3'h2;
    localparam E_States_MANUAL_STORE16BFIRST = 3'h3;
    localparam E_States_MANUAL_STORE16BLAST = 3'h4;
    localparam E_States_MANUAL_SETALU = 3'h5;
    localparam E_States_MANUAL_DISPLAY = 3'h6;
    localparam E_States_AUTO_STEADY = 3'h0;
    localparam E_States_AUTO_RESULT = 3'h1;
    localparam E_States_AUTO_DISPLAYA = 3'h2;
    localparam E_States_AUTO_DISPLAYB = 3'h3;
    localparam E_States_AUTO_DISPLAYALUFN = 3'h4;
    localparam E_States_AUTO_CHECKER = 3'h5;
    localparam E_States_AUTO_ERR = 3'h6;
    logic slowclock;
    localparam CLK_FREQ1 = 24'h989680;
    localparam SLOW_CLOCK_DEFAULT_SPEED = 5'h19;
    logic [5:0] M_rom_a_address;
    logic [31:0] M_rom_a_element;
    
    roma rom_a (
        .address(M_rom_a_address),
        .element(M_rom_a_element)
    );
    
    
    logic [5:0] M_rom_b_address;
    logic [31:0] M_rom_b_element;
    
    romb rom_b (
        .address(M_rom_b_address),
        .element(M_rom_b_element)
    );
    
    
    logic [5:0] M_rom_alufn_address;
    logic [5:0] M_rom_alufn_element;
    
    romalufn rom_alufn (
        .address(M_rom_alufn_address),
        .element(M_rom_alufn_element)
    );
    
    
    logic [5:0] M_rom_out_address;
    logic [31:0] M_rom_out_element;
    
    romoutputexpected rom_out (
        .address(M_rom_out_address),
        .element(M_rom_out_element)
    );
    
    
    localparam SEVEN_SEG_DIV = 5'h10;
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_983066890 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_983066890 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_983066890;
    
    generate
        for (idx_0_983066890 = 0; idx_0_983066890 < 5; idx_0_983066890 = idx_0_983066890 + 1) begin: forLoop_idx_0_983066890
            edge_detector #(
                .RISE(_MP_RISE_983066890[idx_0_983066890]),
                .FALL(_MP_FALL_983066890[idx_0_983066890])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_983066890]),
                .out(M_io_button_edge_out[idx_0_983066890])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][23:0] _MP_CLK_FREQ_828801463 = {{24'h989680, 24'h989680, 24'h989680, 24'h989680, 24'h989680}};
    localparam _MP_MIN_DELAY_828801463 = 5'h14;
    localparam _MP_NUM_SYNC_828801463 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_828801463;
    
    generate
        for (idx_0_828801463 = 0; idx_0_828801463 < 5; idx_0_828801463 = idx_0_828801463 + 1) begin: forLoop_idx_0_828801463
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_828801463[idx_0_828801463]),
                .MIN_DELAY(_MP_MIN_DELAY_828801463),
                .NUM_SYNC(_MP_NUM_SYNC_828801463)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_828801463]),
                .out(M_io_button_cond_out[idx_0_828801463])
            );
        end
    endgenerate
    
    
    localparam _MP_RISE_1855510053 = 1'h1;
    localparam _MP_FALL_1855510053 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1855510053),
        .FALL(_MP_FALL_1855510053)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    logic [2:0] D_manual_d, D_manual_q = 3'h0;
    logic [2:0] D_auto_d, D_auto_q = 3'h0;
    logic [15:0] D_afirsthalf_d, D_afirsthalf_q = 0;
    logic [15:0] D_asecondthalf_d, D_asecondthalf_q = 0;
    logic [15:0] D_bfirsthalf_d, D_bfirsthalf_q = 0;
    logic [15:0] D_bsecondhalf_d, D_bsecondhalf_q = 0;
    logic [5:0] D_alufn_d, D_alufn_q = 0;
    logic [31:0] D_result_d, D_result_q = 32'h0;
    logic [31:0] D_counter_d, D_counter_q = 0;
    logic [4:0] D_speed_pointer_d, D_speed_pointer_q = 5'h19;
    logic D_slow_clock_enable_d, D_slow_clock_enable_q = 1'h0;
    logic [5:0] D_counter_ROM_d, D_counter_ROM_q = 1'h0;
    logic D_zsig_d, D_zsig_q = 1'h1;
    logic D_vsig_d, D_vsig_q = 1'h0;
    logic D_nsig_d, D_nsig_q = 0;
    logic D_manuallock_d, D_manuallock_q = 1'h0;
    logic D_check_d, D_check_q = 1'h0;
    localparam _MP_DIGITS_1198176685 = 3'h4;
    localparam _MP_DIV_1198176685 = 5'h10;
    logic [3:0][3:0] M_seg_values;
    logic [6:0] M_seg_seg;
    logic [3:0] M_seg_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_1198176685),
        .DIV(_MP_DIV_1198176685)
    ) seg (
        .clk(clk),
        .rst(rst),
        .values(M_seg_values),
        .seg(M_seg_seg),
        .sel(M_seg_sel)
    );
    
    
    localparam _MP_DIGITS_1289573507 = 3'h4;
    localparam _MP_LEADING_ZEROS_1289573507 = 1'h1;
    logic [13:0] M_decimal_renderer_value;
    logic [3:0][3:0] M_decimal_renderer_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1289573507),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1289573507)
    ) decimal_renderer (
        .value(M_decimal_renderer_value),
        .digits(M_decimal_renderer_digits)
    );
    
    
    always @* begin
        D_afirsthalf_d = D_afirsthalf_q;
        D_asecondthalf_d = D_asecondthalf_q;
        D_bfirsthalf_d = D_bfirsthalf_q;
        D_bsecondhalf_d = D_bsecondhalf_q;
        D_alufn_d = D_alufn_q;
        D_result_d = D_result_q;
        D_counter_ROM_d = D_counter_ROM_q;
        D_zsig_d = D_zsig_q;
        D_vsig_d = D_vsig_q;
        D_nsig_d = D_nsig_q;
        D_manuallock_d = D_manuallock_q;
        D_check_d = D_check_q;
        D_speed_pointer_d = D_speed_pointer_q;
        D_counter_d = D_counter_q;
        D_manual_d = D_manual_q;
        D_auto_d = D_auto_q;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        
        M_rom_a_address = D_counter_ROM_q;
        M_rom_b_address = D_counter_ROM_q;
        M_rom_alufn_address = D_counter_ROM_q;
        M_rom_out_address = D_counter_ROM_q;
        M_alu_a = {D_afirsthalf_q, D_asecondthalf_q};
        M_alu_b = {D_bfirsthalf_q, D_bsecondhalf_q};
        M_alu_alufn = D_alufn_q;
        D_afirsthalf_d = D_afirsthalf_q;
        D_asecondthalf_d = D_asecondthalf_q;
        D_bfirsthalf_d = D_bfirsthalf_q;
        D_bsecondhalf_d = D_bsecondhalf_q;
        D_alufn_d = D_alufn_q;
        D_result_d = D_result_q;
        D_counter_ROM_d = D_counter_ROM_q;
        D_zsig_d = D_zsig_q;
        D_vsig_d = D_vsig_q;
        D_nsig_d = D_nsig_q;
        D_manuallock_d = D_manuallock_q;
        D_check_d = D_check_q;
        D_speed_pointer_d = D_speed_pointer_q;
        D_counter_d = D_counter_q + 1'h1;
        slowclock = D_counter_q[D_speed_pointer_q];
        D_manual_d = D_manual_q;
        D_auto_d = D_auto_q;
        M_io_button_cond_in = io_button[3'h4:1'h0];
        M_io_button_edge_in = M_io_button_cond_out;
        M_slow_clock_edge_in = slowclock;
        D_slow_clock_enable_d = D_slow_clock_enable_q;
        
        case (D_slow_clock_enable_q)
            1'h0: begin
                M_slow_clock_edge_in = 1'h0;
            end
            1'h1: begin
                M_slow_clock_edge_in = slowclock;
            end
        endcase
        M_decimal_renderer_value = {D_result_q[5'h1f:5'h18], D_result_q[5'h17:5'h10], D_result_q[3'h7:1'h0]};
        io_led = {D_result_q[5'h1f:5'h18], D_result_q[5'h17:5'h10], D_result_q[3'h7:1'h0]};
        io_segment = 1'h0;
        io_select = 4'hf;
        led = {1'h0, D_check_q, 1'h0, D_zsig_q, 1'h0, D_vsig_q, 1'h0, D_nsig_q};
        
        case (D_manual_q)
            3'h0: begin
                if (M_io_button_edge_out[1'h0] && ~D_manuallock_q && ~D_slow_clock_enable_q) begin
                    D_manuallock_d = 1'h1;
                    D_manual_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[1'h1] && D_manuallock_q) begin
                        D_manual_d = 3'h2;
                    end else begin
                        if (M_io_button_edge_out[2'h2] && D_manuallock_q) begin
                            D_manual_d = 3'h3;
                        end else begin
                            if (M_io_button_edge_out[2'h3] && D_manuallock_q) begin
                                D_manual_d = 3'h4;
                            end else begin
                                if (M_io_button_edge_out[3'h4] && D_manuallock_q) begin
                                    D_manual_d = 3'h5;
                                end
                            end
                        end
                    end
                end
            end
            3'h1: begin
                D_afirsthalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {{io_dip[1'h1], io_dip[1'h0]}, 16'h0};
                D_manual_d = 3'h0;
            end
            3'h2: begin
                D_asecondthalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {D_afirsthalf_q, io_dip[1'h1], io_dip[1'h0]};
                D_manual_d = 3'h0;
            end
            3'h3: begin
                D_bfirsthalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {{io_dip[1'h1], io_dip[1'h0]}, 16'h0};
                D_manual_d = 3'h0;
            end
            3'h4: begin
                D_bsecondhalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {D_bfirsthalf_q, io_dip[1'h1], io_dip[1'h0]};
                D_manual_d = 3'h0;
            end
            3'h5: begin
                D_alufn_d = io_dip[2'h2][3'h5:1'h0];
                D_manual_d = 3'h6;
            end
            3'h6: begin
                D_result_d = M_alu_out;
                D_manual_d = 3'h0;
            end
        endcase
        
        case (D_auto_q)
            3'h0: begin
                if ((~M_slow_clock_edge_out && M_io_button_edge_out[1'h1]) && ~D_manuallock_q) begin
                    D_slow_clock_enable_d = 1'h1;
                    D_auto_d = 3'h2;
                end else begin
                    if ((D_slow_clock_enable_q && M_io_button_edge_out[1'h0]) && (D_counter_ROM_q < 5'h1f)) begin
                        D_counter_ROM_d = D_counter_ROM_q + 1'h1;
                        D_auto_d = 3'h2;
                    end else begin
                        if (D_slow_clock_enable_q && M_io_button_edge_out[2'h2]) begin
                            D_auto_d = 3'h2;
                        end else begin
                            if (D_slow_clock_enable_q && M_io_button_edge_out[2'h3]) begin
                                D_slow_clock_enable_d = 1'h0;
                                D_manuallock_d = 1'h0;
                                D_result_d = 32'h0;
                                D_zsig_d = 1'h1;
                                D_vsig_d = 1'h0;
                                D_nsig_d = 1'h0;
                                D_check_d = 1'h0;
                                D_auto_d = 3'h0;
                            end
                        end
                    end
                end
            end
            3'h2: begin
                if (M_slow_clock_edge_out) begin
                    D_result_d = M_rom_a_element;
                    D_afirsthalf_d = M_rom_a_element[5'h1f:5'h10];
                    D_asecondthalf_d = M_rom_a_element[4'hf:1'h0];
                    D_auto_d = 3'h3;
                end
            end
            3'h3: begin
                if (M_slow_clock_edge_out) begin
                    D_result_d = M_rom_b_element;
                    D_bfirsthalf_d = M_rom_b_element[5'h1f:5'h10];
                    D_bsecondhalf_d = M_rom_b_element[4'hf:1'h0];
                    D_auto_d = 3'h4;
                end
            end
            3'h4: begin
                if (M_slow_clock_edge_out) begin
                    D_result_d = {26'h0, M_rom_alufn_element};
                    D_alufn_d = M_rom_alufn_element;
                    D_auto_d = 3'h1;
                end
            end
            3'h1: begin
                if (M_slow_clock_edge_out) begin
                    D_result_d = M_alu_out;
                    D_zsig_d = M_alu_z;
                    D_vsig_d = M_alu_v;
                    D_nsig_d = M_alu_n;
                    D_auto_d = 3'h6;
                end
            end
            3'h6: begin
                if (M_slow_clock_edge_out) begin
                    if (io_dip[2'h2][1'h0]) begin
                        D_result_d[1'h0] = ~D_result_q[1'h0];
                    end
                    D_auto_d = 3'h5;
                end
            end
            3'h5: begin
                if (M_slow_clock_edge_out) begin
                    if (D_result_q == M_rom_out_element) begin
                        D_check_d = 1'h0;
                    end else begin
                        D_check_d = 1'h1;
                    end
                    if (D_result_q == 1'h0) begin
                        D_zsig_d = 1'h1;
                    end else begin
                        D_zsig_d = 1'h0;
                    end
                    D_auto_d = 3'h0;
                end
            end
        endcase
        M_seg_values = M_decimal_renderer_digits;
        io_segment = ~M_seg_seg;
        io_select = ~M_seg_sel;
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_manual_q <= 3'h0;
            D_auto_q <= 3'h0;
            D_afirsthalf_q <= 0;
            D_asecondthalf_q <= 0;
            D_bfirsthalf_q <= 0;
            D_bsecondhalf_q <= 0;
            D_alufn_q <= 0;
            D_result_q <= 32'h0;
            D_counter_q <= 0;
            D_speed_pointer_q <= 5'h19;
            D_slow_clock_enable_q <= 1'h0;
            D_counter_ROM_q <= 1'h0;
            D_zsig_q <= 1'h1;
            D_vsig_q <= 1'h0;
            D_nsig_q <= 0;
            D_manuallock_q <= 1'h0;
            D_check_q <= 1'h0;
        end else begin
            D_manual_q <= D_manual_d;
            D_auto_q <= D_auto_d;
            D_afirsthalf_q <= D_afirsthalf_d;
            D_asecondthalf_q <= D_asecondthalf_d;
            D_bfirsthalf_q <= D_bfirsthalf_d;
            D_bsecondhalf_q <= D_bsecondhalf_d;
            D_alufn_q <= D_alufn_d;
            D_result_q <= D_result_d;
            D_counter_q <= D_counter_d;
            D_speed_pointer_q <= D_speed_pointer_d;
            D_slow_clock_enable_q <= D_slow_clock_enable_d;
            D_counter_ROM_q <= D_counter_ROM_d;
            D_zsig_q <= D_zsig_d;
            D_vsig_q <= D_vsig_d;
            D_nsig_q <= D_nsig_d;
            D_manuallock_q <= D_manuallock_d;
            D_check_q <= D_check_d;
        end
    end
endmodule