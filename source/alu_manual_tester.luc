module alu_manual_tester #(
    CLK_FREQ = 1000)  // Default clock frequency set to 1000 Hz
(
    input clk,  // Clock signal
    input rst,  // Reset signal
    input io_button[5],  // 5 input buttons for user interaction
    input io_dip[3][8],  // 3 sets of 8-bit DIP switches for input
    output io_led[3][8],  // 3 sets of 8-bit LEDs for output display
    output io_segment[8],  // 8-bit seven-segment display output
    output io_select[4],  // 4-bit seven-segment display selector
    output led[8]  // 8-bit LED output
) {
    // Enumeration for manual testing states
    enum States_MANUAL{
        STEADY,  // Idle state, waiting for user input
        STORE16AFIRST,  // Store the first 16 bits of input A
        STORE16ALAST,  // Store the last 16 bits of input A
        STORE16BFIRST,  // Store the first 16 bits of input B
        STORE16BLAST,  // Store the last 16 bits of input B
        SETALU,  // Set the ALU function
        DISPLAY  // Display the ALU result
    }
    
    // Enumeration for automatic testing states
    enum States_AUTO{
        STEADY,  // Idle state, waiting for user input
        RESULT,  // Compute and display the ALU result
        DISPLAYA,  // Display input A from ROM
        DISPLAYB,  // Display input B from ROM
        DISPLAYALUFN,  // Display the ALU function from ROM
        CHECKER,  // Check if the ALU result matches the expected output
        ERR  // Error state (if any)
    }
    
    // Signals and constants
    sig slowclock  // Slow clock signal for debouncing and timing
    const CLK_FREQ1 = $is_sim() ? 1000: 10000000  // Clock frequency for simulation or hardware
    const SLOW_CLOCK_DEFAULT_SPEED = $is_sim() ? 8 : 25  // Default slow clock speed
    roma rom_a  // ROM for storing input A values
    romb rom_b  // ROM for storing input B values
    romalufn rom_alufn  // ROM for storing ALU functions
    romoutputexpected rom_out  // ROM for storing expected ALU outputs
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16  // Clock divider for seven-segment display
    
    // ALU instance
    alu alu
    .clk(clk){
        // Edge detectors for button inputs
        edge_detector io_button_edge[5](#RISE(5x{{1}}),#FALL(5x{{1}}))
        // Button conditioners for debouncing
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{CLK_FREQ1}}))
        // Edge detector for slow clock
        edge_detector slow_clock_edge(#RISE(1),#FALL(0))
        .rst(rst){
            // State registers for manual and auto modes
            dff manual[$width(States_MANUAL)](#INIT(States_MANUAL.STEADY))
            dff auto[$width(States_AUTO)](#INIT(States_AUTO.STEADY))
            // Registers for storing input A and B halves
            dff afirsthalf[16]
            dff asecondthalf[16]
            dff bfirsthalf[16]
            dff bsecondhalf[16]
            // Register for storing ALU function
            dff alufn[6]
            // Register for storing ALU result
            dff result[32](#INIT(32b0))
            // Counter for timing
            dff counter[32]
            // Pointer for slow clock speed
            dff speed_pointer[$clog2(32)](#INIT(SLOW_CLOCK_DEFAULT_SPEED))
            // Enable signal for slow clock
            dff slow_clock_enable(#INIT(0))
            // Counter for ROM addressing
            dff counter_ROM[6](#INIT(0))
            // Flags for ALU status (zero, overflow, negative)
            dff zsig(#INIT(1))
            dff vsig(#INIT(0))
            dff nsig
            // Lock signal for manual mode
            dff manuallock(#INIT(0))
            // Checker signal for result validation
            dff check(#INIT(0))
            // Seven-segment display instance
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV))
        }
    }
    
    // Binary to decimal converter for seven-segment display
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    
    always {
        // Connect ROM addresses to the counter
        rom_a.address = counter_ROM.q
        rom_b.address = counter_ROM.q
        rom_alufn.address = counter_ROM.q
        rom_out.address = counter_ROM.q
        
        // Connect ALU inputs
        alu.a = c{afirsthalf.q,asecondthalf.q}
        alu.b = c{bfirsthalf.q,bsecondhalf.q}
        alu.alufn = alufn.q
        
        // Default values for registers (to be changed in switch cases)
        afirsthalf.d = afirsthalf.q
        asecondthalf.d = asecondthalf.q
        bfirsthalf.d = bfirsthalf.q
        bsecondhalf.d = bsecondhalf.q
        alufn.d = alufn.q
        result.d = result.q
        
        counter_ROM.d = counter_ROM.q
        zsig.d = zsig.q
        vsig.d = vsig.q
        nsig.d = nsig.q
        manuallock.d = manuallock.q
        check.d = check.q
        
        // Set up the speed of the counter
        speed_pointer.d = speed_pointer.q
        counter.d = counter.q + 1
        slowclock = counter.q[speed_pointer.q]

        // State machine logic
        manual.d = manual.q
        auto.d = auto.q

        // Button conditioning and edge detection
        io_button_cond.in = io_button[4:0]
        io_button_edge.in = io_button_cond.out
        
        // Slow clock edge detection
        slow_clock_edge.in = slowclock
        slow_clock_enable.d = slow_clock_enable.q
        
        // Slow clock enable logic
        case(slow_clock_enable.q){
            0:
                slow_clock_edge.in = 0  // Disable edge detection when slow clock is disabled
            1:
                slow_clock_edge.in = slowclock  // Enable edge detection when slow clock is enabled
        }
        
        // Display the result on the seven-segment display and LEDs
        decimal_renderer.value = c{result.q[31:24],result.q[23:16],result.q[7:0]}
        io_led = {result.q[31:24],result.q[23:16],result.q[7:0]}
   
        // Initialize seven-segment display and selector
        io_segment = 0
        io_select = 4hF
        led = c{1b0,check.q,1b0,zsig.q,1b0,vsig.q,1b0,nsig.q}

 
        // Manual testing state machine
        case(manual.q){
            States_MANUAL.STEADY:
                if (io_button_edge.out[0] && ~manuallock.q && ~slow_clock_enable.q){
                    manuallock.d = 1
                    manual.d = States_MANUAL.STORE16AFIRST
                }
                else if (io_button_edge.out[1] && manuallock.q){
                    manual.d = States_MANUAL.STORE16ALAST
                }
                else if (io_button_edge.out[2]&& manuallock.q){
                    manual.d = States_MANUAL.STORE16BFIRST
                }
                else if (io_button_edge.out[3]&& manuallock.q){
                    manual.d = States_MANUAL.STORE16BLAST
                }
                else if (io_button_edge.out[4]&& manuallock.q){
                    manual.d = States_MANUAL.SETALU
                }
            
            States_MANUAL.STORE16AFIRST:
                afirsthalf.d = c{io_dip[1],io_dip[0]}
                result.d = c{c{io_dip[1],io_dip[0]},16b0}
                manual.d = States_MANUAL.STEADY
            
            States_MANUAL.STORE16ALAST:
                asecondthalf.d = c{io_dip[1],io_dip[0]}
                result.d = c{afirsthalf.q,io_dip[1],io_dip[0]}
                manual.d = States_MANUAL.STEADY
            
            States_MANUAL.STORE16BFIRST:
                bfirsthalf.d = c{io_dip[1],io_dip[0]}
                result.d = c{c{io_dip[1],io_dip[0]},16b0}
                manual.d = States_MANUAL.STEADY
            
            States_MANUAL.STORE16BLAST:
                bsecondhalf.d = c{io_dip[1],io_dip[0]}
                result.d = c{bfirsthalf.q,io_dip[1],io_dip[0]}
                manual.d = States_MANUAL.STEADY
            
            States_MANUAL.SETALU:
                alufn.d = io_dip[2][5:0]
                manual.d = States_MANUAL.DISPLAY
            
            States_MANUAL.DISPLAY:
                result.d = alu.out
               manual.d = States_MANUAL.STEADY
        }
        
        
               // Automatic testing state machine
        case(auto.q){
            States_AUTO.STEADY:
                if((~slow_clock_edge.out && io_button_edge.out[1]) && ~manuallock.q){
                    slow_clock_enable.d = 1
                    auto.d = States_AUTO.DISPLAYA
                }
                else if((slow_clock_enable.q && io_button_edge.out[0])&&(counter_ROM.q<31)){
                    counter_ROM.d = counter_ROM.q + 1
                    auto.d = States_AUTO.DISPLAYA       
                }
                else if(slow_clock_enable.q && io_button_edge.out[2]){  // Reload test case
                    auto.d = States_AUTO.DISPLAYA       
                }
                else if(slow_clock_enable.q && io_button_edge.out[3]){  // Switch to manual mode
                    slow_clock_enable.d = 0
                    manuallock.d = 0
                    result.d = 32b0
                    zsig.d = 1
                    vsig.d = 0
                    nsig.d = 0
                    check.d = 0
                    auto.d = States_MANUAL.STEADY     
                }

            States_AUTO.DISPLAYA:
                if(slow_clock_edge.out){
                    result.d = rom_a.element
                    afirsthalf.d = rom_a.element[31:16]
                    asecondthalf.d = rom_a.element[15:0]       
                    auto.d = States_AUTO.DISPLAYB
                }

            States_AUTO.DISPLAYB:
                if(slow_clock_edge.out){
                    result.d = rom_b.element
                    bfirsthalf.d = rom_b.element[31:16]
                    bsecondhalf.d = rom_b.element[15:0] 
                    auto.d = States_AUTO.DISPLAYALUFN
                }

            States_AUTO.DISPLAYALUFN:
                if(slow_clock_edge.out){
                    result.d = c{26b0,rom_alufn.element}
                    alufn.d = rom_alufn.element
                    auto.d = States_AUTO.RESULT
                }

            States_AUTO.RESULT:
                if(slow_clock_edge.out){
                    result.d = alu.out
                    zsig.d = alu.z
                    vsig.d = alu.v
                    nsig.d = alu.n
                    auto.d = States_AUTO.ERR
                }
            
            States_AUTO.ERR:
                if(slow_clock_edge.out){
                    if(io_dip[2][0]){  // Simulate an error if DIP switch is set
                        result.d[0] = ~result.q[0]
                    }
                    
                    auto.d = States_AUTO.CHECKER
                }
  
            States_AUTO.CHECKER:
                if(slow_clock_edge.out){
                    if(result.q == rom_out.element){  // Check if result matches expected output
                
                        check.d = 0  // No error
                    }
                    else{
                        check.d = 1  // Error detected
                    }
                        
                if (result.q==0){
                    zsig.d = 1
                        }
                else{
                    zsig.d = 0
                        }
                    auto.d = States_AUTO.STEADY
                }  
        } 
        
        
        // Update seven-segment display
        seg.values = decimal_renderer.digits
        io_segment = ~seg.seg
        io_select = ~seg.sel
    }
}











   