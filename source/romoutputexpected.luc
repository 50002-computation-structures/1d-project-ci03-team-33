module romoutputexpected (
    input address[6],
    output element[32]
) {
    
    sig out[32]
    
    always {
        case (address) {
      0: out = 32b00101000; // ADD: positive numbers, A=25, B=15, output=40
1: out = 32h80000000; // ADD: overflow, A=MAX_VALUE (+ve), B=1, output=MIN_VALUE
2: out = 32b00001111; // SUB: A=45, B=30, output=15
3: out = 32h7FFFFFFF; // SUB: check for underflow, A=MIN_VALUE, B=1, output=MAX_VALUE
4: out = 32h80000100; // SUB: check Boundary Values(), A=0, B=0x7FFFFF00, output=negative of 0x7FFFFF00
5: out = 32b01111110; // MUL: Positive values, A=14, B=9, output=126
6: out = 32b00000000; // MUL: zero multiplication, A=37, B=0, output=0
7: out = 32h5BBBBBBB; // MUL: multiplication by 1, A=0x5BBBBBBB, B=1, output=0x5BBBBBBB
8: out = 32b00000000; // AND: with zero, A=82, B=0, output=0
9: out = 32b00000000; // AND: with complements, A=91, B=-92, output=0
10: out = 32b01110110; // AND: with ones, A=118, B=-1, output=118
11: out = 32b01011001; // OR: with zeroes, A=89, B=0, output=89
12: out = 32hFFFFFFFF; // OR: with ones, A=37, B=-1, output=-1 (MAX_VALUE)
13: out = 32b00101111; // OR: with self, check for identity, A=47, B=47, output=47
14: out = 32b01001101; // XOR: identity, A=77, B=0, output=77
15: out = 32hFFFFFFFF; // XOR: complement, A=100, B=-101, output=MAX_VALUE (all ones)
16: out = 32b11111010; // LDR: outputs A, A=250, B=8, output=250
17: out = 32b11111010; // SHL: zero shift, output = 250
18: out = 32h80000000; // SHL: max shift, output = 32h80000000
19: out = 32hC00000D0; // SHL: boundary, output = 0xC00000D0
20: out = 32b01111000; // SHR: zero shift, output = 120
21: out = 32b00000001; // SHR: max shift, output = 1
22: out = 32hFA000000; // SRA: arithmetic shift, output = 0xFA000000
23: out = 32b00000001; // CMPEQ: true, output = 1
24: out = 32b00000000; // CMPEQ: false, output = 0
25: out = 32b00000001; // CMPLT: true, output = 1
26: out = 32b00000000; // CMPLT: false, output = 0
27: out = 32b00000000; // CMPLT: false (equal), output = 0
28: out = 32b00000001; // CMPLE: true, output = 1
29: out = 32b00000000; // CMPLE: false, output = 0
      30: out = 32b00001000; // Division: normal div, A=40, B=5, output=8
      default: out = 32b0000000;
        }
        element = out;
    }
}
